# These jobs are triggered automatically and they test the code and the examples.

jobs:
- job: 'test_ubuntu1604'
  condition: eq(variables['build_check'], 'false')
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools
    failOnStderr: true
    displayName: 'Upgrade pip and setuptools'

  - script: pip install -e ".[tests, doc]"
    failOnStderr: true
    displayName: 'Install dev environment'

  - script: |
      pytest --cov pyflagser --cov-report xml
      flake8
    failOnStderr: true
    displayName: 'Test with pytest and flake8'


- job: 'test_macOS1014'
  condition: eq(variables['build_check'], 'false')
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools
    failOnStderr: true
    displayName: 'Upgrade pip and setuptools'

  - script: pip install -e ".[tests, doc]"
    failOnStderr: true
    displayName: 'Install dev environment'

  - script: |
      pytest --cov pyflagser --cov-report xml
      flake8
    failOnStderr: true
    displayName: 'Test with pytest and flake8'


- job: 'test_win2016'
  condition: eq(variables['build_check'], 'false')
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        python_ver: '36'
        python.version: '3.6'
      Python37:
        python_ver: '37'
        python.version: '3.7'
      Python38:
        python_ver: '38'
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools
    failOnStderr: true
    displayName: 'Upgrade pip and setuptools'

  - script: |
      pip install -e ".[tests, doc]"
    failOnStderr: true
    displayName: 'Install dev environment'

  - script: |
      pytest --cov pyflagser --cov-report xml
      flake8
    failOnStderr: true
    displayName: 'Test with pytest and flake8'


# These jobs are triggered manually and they test the code and the examples and build the wheels and docs.

- job: 'manylinux2010'
  condition: eq(variables['build_check'], 'true')
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '36'
        python.version: '3.6'
      Python37:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '37'
        python.version: '3.7'
      Python38:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '38'
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - task: Bash@3
    inputs:
      filePath: .azure-ci/build_manylinux2010.sh
      failOnStderr: false
    env:
      python_ver: $(python_ver)
    displayName: 'Run the docker, install and uninstall dev environment, test with pytest and flake8, build the wheels'

  - script: |
      python -m pip install --upgrade pip
    displayName: 'Upgrade pip and setuptools'

  - script: pip install dist/*.whl
    failOnStderr: true
    displayName: 'Install the wheels'

  - script: |
      pip install pytest pytest-cov pytest-azurepipelines pytest-benchmark flake8 hypothesis
      mkdir tmp_test_cov
      cd tmp_test_cov
      python -m pyflagser.tests --webdl --no-cov --no-coverage-upload
    failOnStderr: true
    displayName: 'Test the wheels with pytest'

  - task: CopyFiles@2
    displayName: 'Copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'


- job: 'macOS1014'
  condition: eq(variables['build_check'], 'true')
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools
    failOnStderr: true
    displayName: 'Upgrade pip and setuptools'

  - script: pip install -e ".[tests, doc]"
    failOnStderr: true
    displayName: 'Install dev environment'

  - script: |
      pytest --cov pyflagser --cov-report xml
      flake8
    failOnStderr: true
    displayName: 'Test with pytest and flake8'

  - script: |
      pip uninstall -y pyflagser
    failOnStderr: true
    displayName: 'Uninstall pyflagser dev'

  - script: |
      pip install wheel
      python setup.py bdist_wheel
    failOnStderr: false
    displayName: 'Build the wheels'

  - script: |
      set -e
      pip install twine
      twine check dist/*
    displayName: 'Check distribution with twine'

  - script: pip install dist/*.whl
    failOnStderr: true
    displayName: 'Install the wheels'

  - script: |
      mkdir tmp_test_cov
      cd tmp_test_cov
      python -m pyflagser.tests --webdl --no-cov --no-coverage-upload
    failOnStderr: true
    displayName: 'Test the wheels with pytest'

  - script: |
      cd doc/
      make html
    failOnStderr: true
    displayName: 'Build sphinx doc'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: doc/build
      includeRootFolder: true
      archiveType: 'zip'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
    displayName: 'Archive doc'

  - task: CopyFiles@2
    displayName: 'Copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'


- job: 'win2016'
  condition: eq(variables['build_check'], 'true')
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        python_ver: '36'
        python.version: '3.6'
      Python37:
        python_ver: '37'
        python.version: '3.7'
      Python38:
        python_ver: '38'
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools
    failOnStderr: true
    displayName: 'Upgrade pip and setuptools'

  - script: |
      pip install -e ".[tests, doc]"
    failOnStderr: true
    displayName: 'Install dev environment'

  - script: |
      pytest --cov pyflagser --cov-report xml
      flake8
    failOnStderr: true
    displayName: 'Test with pytest and flake8'

  - script: |
      pip uninstall -y pyflagser
    failOnStderr: true
    displayName: 'Uninstall pyflagser dev'

  - bash: |
      sed -i $'s/\r$//' README.rst
      pip install wheel
      python setup.py bdist_wheel
    failOnStderr: false
    displayName: 'Build the wheels'

  - bash: pip install dist/*.whl
    failOnStderr: true
    displayName: 'Install the wheels'

  - script: |
      mkdir tmp_test_cov
      cd tmp_test_cov
      python -m pyflagser.tests --webdl --no-cov --no-coverage-upload
    failOnStderr: true
    displayName: 'Test the wheels with pytest'

  - task: CopyFiles@2
    displayName: 'Copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'
