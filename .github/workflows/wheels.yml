name: Build Wheels

on : workflow_dispatch

jobs:

  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ github.event.repository.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        env:
          # Specify which Python versions to build wheels
          # https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-*"
          # Skip 32 bit architectures, musllinux, and i686, and macOS x86_64 wheels for CP3.8 -- CP3.10
          CIBW_SKIP: "*-win32 *-musllinux_x86_64 *_i686 cp38-macosx_x86_64 cp39-macosx_x86_64 cp310-macosx_x86_64"
          CIBW_BEFORE_BUILD_WINDOWS: python -m pip install cmake && python -m pip install --upgrade pip setuptools && sed -i $'s/\r$//' README.rst && python -m pip install delvewheel
          CIBW_BEFORE_BUILD_LINUX: python -m pip install cmake && python -m pip install --upgrade pip setuptools
          CIBW_BEFORE_BUILD_MACOS: python -m pip install cmake && python -m pip install --upgrade pip setuptools
          CIBW_TEST_COMMAND: python -m pyflagser.tests --webdl
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -vv -w {dest_dir} {wheel}"
          CIBW_TEST_REQUIRES: pytest hypothesis
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          # Should generate universal2 wheels for CP3.8 -- CP3.10
          CIBW_ARCHS_MACOS: x86_64 universal2

      - uses: actions/upload-artifact@v2
        name: Upload wheels
        with:
          path: ./wheelhouse/*.whl
